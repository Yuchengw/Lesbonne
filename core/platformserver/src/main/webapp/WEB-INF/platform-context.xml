<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 	  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	      http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/data/jpa 
          http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.lesbonne.*"/>
	
	<tx:annotation-driven/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
						  destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true"/>
		<property name="username" value="root"/>
		<property name="password" value="lesbonne"/>
    </bean>
    
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/>
    	<property name="annotatedClasses">
    		<list>
    			<value>com.lesbonne.user.User</value>
    			<value>com.lesbonne.userrelation.UserRelation</value>
    			<value>com.lesbonne.sharingpost.SharingPost</value>
    			<value>com.lesbonne.askingpost.AskingPost</value>
    			<value>com.lesbonne.postcomment.PostComment</value>
    			<value>com.lesbonne.order.Order</value>
    			<value>com.lesbonne.partner.Partner</value>
    		</list>
    	</property>
    	<property name="hibernateProperties">
    		<props>
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
    			<prop key="hiberate.show_sql">true</prop>
				<!-- create create-drop validate update -->
    			<prop key="hibernate.hbm2ddl.auto">update</prop> 	
    		</props>
    	</property>
    </bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"
								  p:sessionFactory-ref="sessionFactory">
	</bean>

<!-- 	<bean id="redisProvider" class="com.yummet.cache.RedisProvider" />   
	<bean id="redisService" class="com.yummet.cache.RedisService"/>
	<bean id="redisDataSource" class="com.yummet.cache.RedisDataSourceImpl" />
	<bean id="redisClientTemplate" class="com.yummet.cache.RedisClientTemplate" />
	<bean id="systemContext" class="com.yummet.platform.adapters.SystemContext"/> -->
	
	<!-- <mongo:mongo host="localhost" port="27017" id="mongo" /> 
	 for defining mongo template
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="iamhere" />
	</bean>

	For consider the using of annotations fof defining Spring Bean
	<context:annotation-config />
	For defining Spring Bean
	<context:component-scan base-package="com.yummet.platform.adapters" />
	For defining mongo repository
	<mongo:repositories base-package="com.yummet.mongodb.repositories" />	

	Redis configuration
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
         <property name="maxActive" value="32"></property> 
        <property name="maxIdle" value="6"></property>  
         <property name="maxWait" value="15000"></property>
        <property name="minEvictableIdleTimeMillis" value="300000"></property>  
        <property name="numTestsPerEvictionRun" value="3"></property>  
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>  
         <property name="whenExhaustedAction" value="1"></property> 
        <property name="testOnBorrow" value="true"></property>  
    </bean>  
    ShardedJedisPool v.s. JedisPool 一个是分片形式，可以连接有主备的redis服务端，一个是单个的
	<bean id="jedis.shardInfo1" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg index="0" value="127.0.0.1" />
		<constructor-arg index="1" value="6379" />
	</bean>
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"
		scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				ref bean="jedis.shardInfo1" /
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg value="127.0.0.1" />
					<constructor-arg type="int" value="6379" />
					<constructor-arg value="instance:01" />
					<property name="password" value="amer0501"></property> 
				</bean>
			</list>
		</constructor-arg>
	</bean>
	
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">  
        <property name="poolConfig" ref="jedisPoolConfig"></property>  
        <property name="hostName" value="127.0.0.1"></property>  
        <property name="port" value="6379"></property>  
        <property name="password" value="amer0501"></property>  
        <property name="timeout" value="15000"></property>  
        <property name="usePool" value="true"></property>  
    </bean>  
   
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
        </property>  
    </bean>   -->
</beans>